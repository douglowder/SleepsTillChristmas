diff --git a/node_modules/expo-audio/expo-module.config.json b/node_modules/expo-audio/expo-module.config.json
index 69f7860..070a18d 100644
--- a/node_modules/expo-audio/expo-module.config.json
+++ b/node_modules/expo-audio/expo-module.config.json
@@ -1,5 +1,5 @@
 {
-  "platforms": ["ios", "android"],
+  "platforms": ["ios", "tvos", "android"],
   "ios": {
     "modules": ["AudioModule"]
   },
diff --git a/node_modules/expo-audio/ios/AudioComponentRegistry.swift b/node_modules/expo-audio/ios/AudioComponentRegistry.swift
index 47f870c..76a9643 100644
--- a/node_modules/expo-audio/ios/AudioComponentRegistry.swift
+++ b/node_modules/expo-audio/ios/AudioComponentRegistry.swift
@@ -1,7 +1,9 @@
 class AudioComponentRegistry {
   static let shared = AudioComponentRegistry()
   var players = [String: AudioPlayer]()
+  #if os(iOS)
   var recorders = [String: AudioRecorder]()
+  #endif
 
   private init() {}
 
@@ -9,20 +11,26 @@ class AudioComponentRegistry {
     players[player.id] = player
   }
 
+  #if os(iOS)
   func add(_ recorder: AudioRecorder) {
     recorders[recorder.id] = recorder
   }
+  #endif
 
   func remove(_ player: AudioPlayer) {
     players.removeValue(forKey: player.id)
   }
 
+  #if os(iOS)
   func remove(_ recorder: AudioRecorder) {
     recorders.removeValue(forKey: recorder.id)
   }
+  #endif
 
   func removeAll() {
     players.removeAll()
+    #if os(iOS)
     recorders.removeAll()
+    #endif
   }
 }
diff --git a/node_modules/expo-audio/ios/AudioModule.swift b/node_modules/expo-audio/ios/AudioModule.swift
index c4773c6..bd45792 100644
--- a/node_modules/expo-audio/ios/AudioModule.swift
+++ b/node_modules/expo-audio/ios/AudioModule.swift
@@ -10,9 +10,11 @@ public class AudioModule: Module {
     Name("ExpoAudio")
 
     OnCreate {
+      #if os(iOS)
       self.appContext?.permissions?.register([
         AudioRecordingRequester()
       ])
+      #endif
     }
 
     AsyncFunction("setAudioModeAsync") { (mode: AudioMode) in
@@ -24,19 +26,27 @@ public class AudioModule: Module {
     }
 
     AsyncFunction("requestRecordingPermissionsAsync") { (promise: Promise) in
+      #if os(iOS)
       appContext?.permissions?.askForPermission(
         usingRequesterClass: AudioRecordingRequester.self,
         resolve: promise.resolver,
         reject: promise.legacyRejecter
       )
+      #else
+      promise.reject(Exception.init(name: "UnsupportedOperation", description: "Audio recording is not supported on this platform."))
+      #endif
     }
 
     AsyncFunction("getRecordingPermissionsAsync") { (promise: Promise) in
+      #if os(iOS)
       appContext?.permissions?.getPermissionUsingRequesterClass(
         AudioRecordingRequester.self,
         resolve: promise.resolver,
         reject: promise.legacyRejecter
       )
+      #else
+      promise.reject(Exception.init(name: "UnsupportedOperation", description: "Audio recording is not supported on this platform."))
+      #endif
     }
 
     OnDestroy {
@@ -166,6 +176,7 @@ public class AudioModule: Module {
       }
     }
 
+    #if os(iOS)
     // swiftlint:disable:next closure_body_length
     Class(AudioRecorder.self) {
       Constructor { (options: RecordingOptions) -> AudioRecorder in
@@ -238,6 +249,7 @@ public class AudioModule: Module {
         try RecordingUtils.setInput(input)
       }
     }
+    #endif
   }
 
   private func recordingDirectory() throws -> URL {
@@ -267,6 +279,7 @@ public class AudioModule: Module {
     var category: AVAudioSession.Category = .soloAmbient
     var options: AVAudioSession.CategoryOptions = []
 
+    #if os(iOS)
     if !mode.allowsRecording {
       AudioComponentRegistry.shared.recorders.values.forEach { recorder in
         if recorder.isRecording {
@@ -275,6 +288,7 @@ public class AudioModule: Module {
         }
       }
     }
+    #endif
 
     if !mode.playsInSilentMode {
       if mode.interruptionMode == .doNotMix {
@@ -298,6 +312,7 @@ public class AudioModule: Module {
   }
 
   private func checkPermissions() throws {
+    #if os(iOS)
     if #available(iOS 17.0, *) {
       switch AVAudioApplication.shared.recordPermission {
       case .denied, .undetermined:
@@ -313,5 +328,6 @@ public class AudioModule: Module {
         break
       }
     }
+    #endif
   }
 }
diff --git a/node_modules/expo-audio/ios/AudioUtils.swift b/node_modules/expo-audio/ios/AudioUtils.swift
index 46f8990..a7391aa 100644
--- a/node_modules/expo-audio/ios/AudioUtils.swift
+++ b/node_modules/expo-audio/ios/AudioUtils.swift
@@ -69,6 +69,7 @@ struct RecordingUtils {
 }
 
 struct AudioUtils {
+  #if os(iOS)
   static func createRecorder(directory: URL?, with options: RecordingOptions) -> AVAudioRecorder {
     if let directory {
       let fileUrl = createRecordingUrl(from: directory, with: options)
@@ -80,6 +81,7 @@ struct AudioUtils {
     }
     return AVAudioRecorder()
   }
+  #endif
 
   static func createAVPlayer(from source: AudioSource?) -> AVPlayer {
     if let source, let url = source.uri {
diff --git a/node_modules/expo-audio/ios/ExpoAudio.podspec b/node_modules/expo-audio/ios/ExpoAudio.podspec
index 8f733e4..7b68541 100644
--- a/node_modules/expo-audio/ios/ExpoAudio.podspec
+++ b/node_modules/expo-audio/ios/ExpoAudio.podspec
@@ -11,7 +11,8 @@ Pod::Spec.new do |s|
   s.author         = package['author']
   s.homepage       = package['homepage']
   s.platforms = {
-    :ios => '15.1'
+    :ios => '15.1',
+    :tvos => '15.1'
   }
   s.swift_version  = '5.4'
   s.source         = { git: 'https://github.com/expo/expo.git' }
@@ -25,4 +26,7 @@ Pod::Spec.new do |s|
   }
   
   s.source_files = "**/*.{h,m,swift}"
+  s.tvos.exclude_files = "**/AudioRecorder.swift",
+                         "**/AudioRecordingRequester.swift",
+                         "**/RecordingDelegate.swift"
 end
